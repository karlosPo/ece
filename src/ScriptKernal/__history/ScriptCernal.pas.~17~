unit ScriptCernal;

interface

uses
    Windows,
    ActiveX,
    Scripts,
    activescp;

type
    TScriptCernal = class(TInterfacedObject, IActiveScriptSite)
    protected
    {IActiveScriptSite}
      function GetLCID(out plcid: LCID): HResult; stdcall;
      function GetItemInfo(pstrName: LPCOLESTR; dwReturnMask: DWORD;
        out ppiunkItem: IUnknown; out ppti: ITypeInfo): HResult; stdcall;
      function GetDocVersionString(
        out pbstrVersion: WideString): HResult; stdcall;
      function OnScriptTerminate(var pvarResult: OleVariant;
        var pexcepinfo: EXCEPINFO): HResult; stdcall;
      function OnStateChange(
        ssScriptState: SCRIPTSTATE): HResult; stdcall;
      function OnScriptError(
        const pscripterror: IActiveScriptError): HResult; stdcall;
      function OnEnterScript: HResult; stdcall;
      function OnLeaveScript: HResult; stdcall;
    end;

implementation

{ TScriptCernal }

function TScriptCernal.GetDocVersionString(
  out pbstrVersion: WideString): HResult;
begin
  Result := E_NOTIMPL;
end;

function TScriptCernal.GetItemInfo(pstrName: LPCOLESTR; dwReturnMask: DWORD;
  out ppiunkItem: IInterface; out ppti: ITypeInfo): HResult;
begin
  Result := E_NOTIMPL;
end;

function TScriptCernal.GetLCID(out plcid: LCID): HResult;
begin
  plcid := GetSystemDefaultLCID;
  Result := S_OK;
end;

function TScriptCernal.OnEnterScript: HResult;
begin

end;

function TScriptCernal.OnLeaveScript: HResult;
begin

end;

function TScriptCernal.OnScriptError(
  const pscripterror: IActiveScriptError): HResult;
begin

end;

function TScriptCernal.OnScriptTerminate(var pvarResult: OleVariant;
  var pexcepinfo: EXCEPINFO): HResult;
begin

end;

function TScriptCernal.OnStateChange(ssScriptState: SCRIPTSTATE): HResult;
begin

end;

end.
