unit zeWndControl;

interface

uses
  Windows;

type
  TzeWndControl = class
  private
    fHandle : HWND;
  protected
    function GetHwnd : HWND; virtual; abstract;
  public
    Constructor Create;
    Destructor Destroy;
    property Handle : HWND read fHandle;

    function GetVisible: Boolean;
    procedure SetVisible(const Value: Boolean);
    function GetTile: WideString;
    procedure SetTitle(const Value: WideString);

    procedure Show;
    procedure Hide;
    procedure Minimize;
    procedure Maximize;
    procedure Restore;
    property  Visible : Boolean Read GetVisible write SetVisible;
    property  Title : string read GetTile write SetTitle;
  end;

implementation

{ TzeWndControl }

constructor TzeWndControl.Create;
begin
  fHandle := GetHwnd;
end;

destructor TzeWndControl.Destroy;
begin
  DestroyWindow(fHandle);
end;

function TzeWndControl.GetTile: string;
begin

end;

function TzeWndControl.GetVisible: Boolean;
begin
  Result := IsWindowVisible(Handle);
end;

procedure TzeWndControl.Hide;
begin
  ShowWindow(fHandle, SW_HIDE);
end;

procedure TzeWndControl.Maximize;
begin
  ShowWindow(fHandle, SW_MAXIMIZE);
end;

procedure TzeWndControl.Minimize;
begin
  ShowWindow(fHandle, SW_MINIMIZE);
end;

procedure TzeWndControl.Restore;
begin
  ShowWindow(fHandle, SW_RESTORE);
end;

procedure TzeWndControl.SetTitle(const Value: string);
begin
  SetWindowTextA()
end;

procedure TzeWndControl.SetVisible(const Value: Boolean);
begin
  if Value then Show else Hide;
  
end;

procedure TzeWndControl.Show;
begin
  ShowWindow(fHandle, SW_SHOW);
end;

end.
